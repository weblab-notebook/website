{
    "nbformat": 4,
    "nbformat_minor": 0,
    "metadata": {
        "kernel_info": {
            "name": "Weblab"
        },
        "language_info": {
            "name": "javascript"
        }
    },
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Javascript\n\nWeblab uses a Javascript interpreter to execute the code inside of code cells. Javascript is a lightweight, general-purpose programming language that is predominantly used as the programming language for the web. The language has matured from a basic scripting language to multi-paradigm language with modules and classes. To find out more about Javascript, check out the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript). Through Javascripts just-in-time compilation it has reached high performance and is used in more and more applications."
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<h1>Javascript</h1>\n<p>Weblab uses a Javascript interpreter to execute the code inside of code cells. Javascript is a lightweight, general-purpose programming language that is predominantly used as the programming language for the web. The language has matured from a basic scripting language to multi-paradigm language with modules and classes. To find out more about Javascript, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">Mozilla Developer Network</a>. Through Javascripts just-in-time compilation it has reached high performance and is used in more and more applications.</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## ECMAScript\n\nJavascript has been standardized in form of the ECMAScript specification, which is supported in all major browsers. However, Javascript is also used in non-browser environments like [Node.js](https://www.nodejs.org). Weblab conforms to the ECMAScript standard but does not support the Node.js syntax."
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<h2>ECMAScript</h2>\n<p>Javascript has been standardized in form of the ECMAScript specification, which is supported in all major browsers. However, Javascript is also used in non-browser environments like <a href=\"https://www.nodejs.org\">Node.js</a>. Weblab conforms to the ECMAScript standard but does not support the Node.js syntax.</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Imports\n\nWeblab lets you import modules from outside of Weblab. There are two kind of modules: ECMAScript modules and Node modules. Importing **ECMAScript modules** is directly supported. You can import a module by providing its url on cdn.jsdelivr.net like so:"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<h2>Imports</h2>\n<p>Weblab lets you import modules from outside of Weblab. There are two kind of modules: ECMAScript modules and Node modules. Importing <strong>ECMAScript modules</strong> is directly supported. You can import a module by providing its url on cdn.jsdelivr.net like so:</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "source": [
                "import Chart from \"https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.esm.js\";"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": ""
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "**Node modules** have to be bundled with Weblab. Therefore you can only choose among the preinstalled modules that come with Weblab. The currently bundled packages are:\n\n- ```@tensorflow/tfjs```\n- ```@tensorflow/tfjs-vis```\n\nYou can import the prebundled packages like so:"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<p><strong>Node modules</strong> have to be bundled with Weblab. Therefore you can only choose among the preinstalled modules that come with Weblab. The currently bundled packages are:</p>\n<ul>\n<li><code>@tensorflow/tfjs</code></li>\n<li><code>@tensorflow/tfjs-vis</code></li>\n</ul>\n<p>You can import the prebundled packages like so:</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "source": [
                "import * as tf from \"@tensorflow/tfjs\""
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": ""
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Async/Await\n\nJavascript supports the async/await syntax to simplify asynchronous programming. The ```async``` keyword defines asynchronous functions that return a [Promise](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises). These Promises can than be ```await```ed to yield the result. Here is an example:"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<h2>Async/Await</h2>\n<p>Javascript supports the async/await syntax to simplify asynchronous programming. The <code>async</code> keyword defines asynchronous functions that return a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises\">Promise</a>. These Promises can than be <code>await</code>ed to yield the result. Here is an example:</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "source": [
                "async function hello() {\n  return \"Hello\"\n}\n\nawait hello()"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": ""
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Asynchronous functions don't block the current thread when they are executed. This can be very handy when performing tasks that take a long time but don't need any CPU resources, for example network requests or file access.\n\nThere are important Javascript functions that are asynchronous. One example is the ```fetch()``` function. The [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) provides an interface to fetch resources from the internet. It returns a Promise with the resulting HTML Response. Let's look at an example:"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": "<p>Asynchronous functions don't block the current thread when they are executed. This can be very handy when performing tasks that take a long time but don't need any CPU resources, for example network requests or file access.</p>\n<p>There are important Javascript functions that are asynchronous. One example is the <code>fetch()</code> function. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> provides an interface to fetch resources from the internet. It returns a Promise with the resulting HTML Response. Let's look at an example:</p>\n"
                    }
                }
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 0,
            "metadata": {},
            "source": [
                "let example = fetch('https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json')\n  .then(response => response.json())\n\nawait example"
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": ""
                    }
                }
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                ""
            ],
            "outputs": [
                {
                    "output_type": "display_data",
                    "metadata": {},
                    "data": {
                        "text/plain": ""
                    }
                }
            ]
        }
    ]
}