{"nbformat":4,"nbformat_minor":0,"metadata":{"kernel_info":{"name":"Weblab"},"language_info":{"name":"javascript"}},"cells":[{"cell_type":"markdown","metadata":{},"source":["# Bar plots with Chart.js\n\nWhen you are working with data it can be very helpful to plot the data you are working with. In this example we will use the [Chart.js](https://www.chartjs.org/) library to create a bar plot from 1D data. The following cell imports all requirements to create a BarChart and registers them in the Chart class."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h1>Bar plots with Chart.js</h1>\n<p>When you are working with data it can be very helpful to plot the data you are working with. In this example we will use the <a href=\"https://www.chartjs.org/\">Chart.js</a> library to create a bar plot from 1D data. The following cell imports all requirements to create a BarChart and registers them in the Chart class.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["import { Chart, BarController, BarElement, LinearScale, CategoryScale, Title, Legend} from \"chart.js\";\n\nChart.register(BarController, BarElement, LinearScale, CategoryScale, Title, Legend);"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["As a next step we need a ```<canvas>``` element into which Chart.js will plot the data. Weblab provides the ```document.createElement()``` method to create HTML Elements. To be able to later refer to the created canvas, we set the ```id``` of the HTML Element to ```\"myChart\"```. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>As a next step we need a <code>&lt;canvas&gt;</code> element into which Chart.js will plot the data. Weblab provides the <code>document.createElement()</code> method to create HTML Elements. To be able to later refer to the created canvas, we set the <code>id</code> of the HTML Element to <code>&quot;myChart&quot;</code>. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["var canvas = document.createElement(\"canvas\")\ncanvas.id = \"myChart\"\ncanvas.height = 400\ncanvas"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new ```Chart``` object and specifying the name ```\"myChart\"``` of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new <code>Chart</code> object and specifying the name <code>&quot;myChart&quot;</code> of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let myChart = new Chart(\"myChart\", {\n    type: 'bar',\n    data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    },\n    options: {\n        scales: {\n            y: {\n                beginAtZero: true\n            }\n        },\n      \tmaintainAspectRatio: false,\n    }\n});"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["You can update the chart by changing the properties of the chart object and calling the ``update()`` function afterwards."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>You can update the chart by changing the properties of the chart object and calling the <code>update()</code> function afterwards.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["myChart.data = {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n            label: '# of Votes',\n            data: [8, 19, 3, 16, 2, 3],\n            backgroundColor: [\n                'rgba(255, 99, 132, 0.2)',\n                'rgba(54, 162, 235, 0.2)',\n                'rgba(255, 206, 86, 0.2)',\n                'rgba(75, 192, 192, 0.2)',\n                'rgba(153, 102, 255, 0.2)',\n                'rgba(255, 159, 64, 0.2)'\n            ],\n            borderColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)',\n                'rgba(255, 159, 64, 1)'\n            ],\n            borderWidth: 1\n        }]\n    }\nmyChart.update()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["This also applies to the display options. You can for instance set the title of the chart."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>This also applies to the display options. You can for instance set the title of the chart.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["myChart.options = {\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: \"My first bar chart\"\n    },\n    legend: {\n      display: true,\n      position: \"right\",\n    }\n  }\n}\nmyChart.update()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]}]}