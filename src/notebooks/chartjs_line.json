{"nbformat":4,"nbformat_minor":0,"metadata":{"kernel_info":{"name":"Weblab"},"language_info":{"name":"javascript"}},"cells":[{"cell_type":"markdown","metadata":{},"source":["# Line plots with Chart.js\n\nWhen you are working with data it can be very helpful to plot the data you are working with. In this example we will use the [Chart.js](https://www.chartjs.org/) library to create a line plot from 1D data. The following cell imports all requirements to create a LineChart and registers them in the Chart class."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h1>Line plots with Chart.js</h1>\n<p>When you are working with data it can be very helpful to plot the data you are working with. In this example we will use the <a href=\"https://www.chartjs.org/\">Chart.js</a> library to create a line plot from 1D data. The following cell imports all requirements to create a LineChart and registers them in the Chart class.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["import { Chart, LineController, LineElement, PointElement, LinearScale, CategoryScale, Title, Legend} from \"chart.js\";\n\nChart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, Title, Legend);"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["As a next step we need a ```<canvas>``` element into which Chart.js will plot the data. Weblab provides the ```document.createElement()``` method to create HTML Elements. To be able to later refer to the created canvas, we set the ```id``` of the HTML Element to ```\"myChart\"```. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>As a next step we need a <code>&lt;canvas&gt;</code> element into which Chart.js will plot the data. Weblab provides the <code>document.createElement()</code> method to create HTML Elements. To be able to later refer to the created canvas, we set the <code>id</code> of the HTML Element to <code>&quot;myChart&quot;</code>. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":[""],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["var canvas = document.createElement(\"canvas\")\ncanvas.id = \"myChart\"\ncanvas.height = 400\ncanvas"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new ```Chart``` object and specifying the name ```\"myChart\"``` of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new <code>Chart</code> object and specifying the name <code>&quot;myChart&quot;</code> of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":[""],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let myLineChart = new Chart(\"myChart\", {\n    type: 'line',\n    data: {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    fill: false,\n    borderColor: 'rgb(57, 73, 171)',\n    tension: 0.1\n  }]\n},\n  options: {\n    maintainAspectRatio: false,\n  }\n});\n"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["You can update the chart by changing the properties of the chart object and calling the ``update()`` function afterwards."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>You can update the chart by changing the properties of the chart object and calling the <code>update()</code> function afterwards.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["myLineChart.data = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First Dataset',\n    data: [65, 59, 80, 81, 56, 55, 40],\n    fill: false,\n    borderColor: 'rgb(57, 73, 171)',\n    tension: 0.1\n  },{\n    label: 'My Second Dataset',\n    data: [23, 34, 65, 30, 72, 80, 96],\n    fill: false,\n    borderColor: 'rgb(255, 61, 0)',\n    tension: 0.1\n  }]\n}\nmyLineChart.update()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["This also applies to the display options. You can for instance set the title of the chart."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>This also applies to the display options. You can for instance set the title of the chart.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["myLineChart.options = {\n  maintainAspectRatio: false,\n  plugins: {\n    title: {\n      display: true,\n      text: \"My first line chart\"\n    },\n    legend: {\n      display: true,\n      position: \"right\",\n    }\n  }\n}\nmyLineChart.update()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]}]}