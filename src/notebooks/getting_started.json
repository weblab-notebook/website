{"nbformat":4,"nbformat_minor":0,"metadata":{"kernel_info":{"name":"Weblab"},"language_info":{"name":"javascript"}},"cells":[{"cell_type":"markdown","metadata":{},"source":["# Getting started\n\nWeblab notebooks are a great way to code interactively. \nBy running small snippets of code you can directly see their effect. \nAdditionally, Weblab let's you add text or illustrations to your source code. \nMaking it easier to understand your code for yourself and others.\n\nEvery Weblab notebook is a collection of cells which are either\n\n- **code** cells or\n- **markdown** cells.\n\nLet's learn more about how to use code and markdown cells."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h1>Getting started</h1>\n<p>Weblab notebooks are a great way to code interactively.\nBy running small snippets of code you can directly see their effect.\nAdditionally, Weblab let's you add text or illustrations to your source code.\nMaking it easier to understand your code for yourself and others.</p>\n<p>Every Weblab notebook is a collection of cells which are either</p>\n<ul>\n<li><strong>code</strong> cells or</li>\n<li><strong>markdown</strong> cells.</li>\n</ul>\n<p>Let's learn more about how to use code and markdown cells.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["## Code cells\n\nCode cells are where the \"magic\" happens. They evaluate your code. To understand how this works, let's look at an example."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h2>Code cells</h2>\n<p>Code cells are where the &quot;magic&quot; happens. They evaluate your code. To understand how this works, let's look at an example.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let pi = 3.14159\nlet radius = 7.0;\n\npi*radius*radius"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The cell contains Javascript code. You can evaluate the cell by pressing \"Shift+Enter\" or the \"Run\"-button in the menubar. Weblab will run an interpreter that evaluates the source code inside the cell. It will then print out the result of the last statement of the cell. If you haven't already, give it a try!\n\nThe power of programming comes from using **abstractions**. We have just learned one powerful way of creating abstractions. The declaration of variables. Variables let you refer to certain expressions by names. Variables persist across cell borders and can be reused in other cells. For example:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The cell contains Javascript code. You can evaluate the cell by pressing &quot;Shift+Enter&quot; or the &quot;Run&quot;-button in the menubar. Weblab will run an interpreter that evaluates the source code inside the cell. It will then print out the result of the last statement of the cell. If you haven't already, give it a try!</p>\n<p>The power of programming comes from using <strong>abstractions</strong>. We have just learned one powerful way of creating abstractions. The declaration of variables. Variables let you refer to certain expressions by names. Variables persist across cell borders and can be reused in other cells. For example:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["2.0*pi*radius"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Another powerful way to create abstractions are functions. A function lets you name a group of operations and then refer to it as a unit. For example:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Another powerful way to create abstractions are functions. A function lets you name a group of operations and then refer to it as a unit. For example:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["function square(x) {\n\treturn x*x\n}"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Are you getting an \"undefined\" when you run the cell? Don't worry, that's the right value of a function declaration. The function was still defined and is ready to be used. Check it out:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Are you getting an &quot;undefined&quot; when you run the cell? Don't worry, that's the right value of a function declaration. The function was still defined and is ready to be used. Check it out:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["pi*square(radius)"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Variables and functions are a great way to abstract away some complexity while programming. But to be honest you probably don't want to start writing a complex program like a linear algebra framework in weblab. Luckily you don't have to. There are thousands of libraries available in the Javascript ecosystem. You just have to learn how to import them into you project. Importing is done by using the import statement as follows:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Variables and functions are a great way to abstract away some complexity while programming. But to be honest you probably don't want to start writing a complex program like a linear algebra framework in weblab. Luckily you don't have to. There are thousands of libraries available in the Javascript ecosystem. You just have to learn how to import them into you project. Importing is done by using the import statement as follows:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["import * as tf from \"@tensorflow/tfjs\"\n\ntf.version.tfjs"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The Javascript programming language offers a lot more features which cannot all be covered here. If you want to learn more, the [javascript reference in the Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript) is a great place to start."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The Javascript programming language offers a lot more features which cannot all be covered here. If you want to learn more, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">javascript reference in the Mozilla Developer Network</a> is a great place to start.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["## Markdown cells\n\nMarkdown cells are \"text\" cells. They let you write comments, add links or add images. Markdown cells have two modes. An edit and a display mode.\n\nAs the name suggests, the **edit** mode enables you to edit the content of the cell. You can get into the edit mode of a markdown cell by double clicking it. The idea behind markdown cells is that you write content in the edit mode according to the Markdown syntax and then display the formatted text by switch into the display mode.\n\nThe **display** mode displays the html that is generated from the markdown source. To switch into the display mode from the edit mode, press \"Shift+Enter\" or the \"Run\"-button in the menubar. It's best if you try the whole thing out. Double click on the current cell, edit the content and switch back to the display mode to see the changes.\n"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h2>Markdown cells</h2>\n<p>Markdown cells are &quot;text&quot; cells. They let you write comments, add links or add images. Markdown cells have two modes. An edit and a display mode.</p>\n<p>As the name suggests, the <strong>edit</strong> mode enables you to edit the content of the cell. You can get into the edit mode of a markdown cell by double clicking it. The idea behind markdown cells is that you write content in the edit mode according to the Markdown syntax and then display the formatted text by switch into the display mode.</p>\n<p>The <strong>display</strong> mode displays the html that is generated from the markdown source. To switch into the display mode from the edit mode, press &quot;Shift+Enter&quot; or the &quot;Run&quot;-button in the menubar. It's best if you try the whole thing out. Double click on the current cell, edit the content and switch back to the display mode to see the changes.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["### Headings\n\nOne very useful feature of markdown is that you can easily create headings. Just prepend a `#` before a line and the line becomes a heading. For example:\n```\n# Your heading\n```\nBy using multiple `#` you can specify different levels of headings. Using `#` gives the highest level heading where as using `######` gives the lowest level heading.\nHave a look at the source of this cell to see that the heading of this cell is a third level heading."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h3>Headings</h3>\n<p>One very useful feature of markdown is that you can easily create headings. Just prepend a <code>#</code> before a line and the line becomes a heading. For example:</p>\n<pre><code># Your heading\n</code></pre>\n<p>By using multiple <code>#</code> you can specify different levels of headings. Using <code>#</code> gives the highest level heading where as using <code>######</code> gives the lowest level heading.\nHave a look at the source of this cell to see that the heading of this cell is a third level heading.</p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["### Lists\n\nIt is also very easy to create lists of items in markdown. You can use `-` or `*` in front of a line to turn it into a list item. For example:\n\n```\n- apples\n- bananas\n- oranges\n```\n\nbecomes\n\n- apples\n- bananas\n- oranges"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h3>Lists</h3>\n<p>It is also very easy to create lists of items in markdown. You can use <code>-</code> or <code>*</code> in front of a line to turn it into a list item. For example:</p>\n<pre><code>- apples\n- bananas\n- oranges\n</code></pre>\n<p>becomes</p>\n<ul>\n<li>apples</li>\n<li>bananas</li>\n<li>oranges</li>\n</ul>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["### Links\n\n```\n[text](https://www.link.to/where/you/want)\n```\n\n[Weblab documentation](https://www.weblab.ai/documentation)"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h3>Links</h3>\n<pre><code>[text](https://www.link.to/where/you/want)\n</code></pre>\n<p><a href=\"https://www.weblab.ai/documentation\">Weblab documentation</a></p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["```\n![alternative text](https://www.link.to/image)\n```\n\n![image example](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRy-HD5aT9sOABTSarsGl22mDZav1CGsVi7xg&usqp=CAU)"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<pre><code>![alternative text](https://www.link.to/image)\n</code></pre>\n<p><img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRy-HD5aT9sOABTSarsGl22mDZav1CGsVi7xg&usqp=CAU\" alt=\"image example\" /></p>\n"}}]},{"cell_type":"markdown","metadata":{},"source":["Find out more about markdown syntax [here](https://commonmark.org/help/)."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Find out more about markdown syntax <a href=\"https://commonmark.org/help/\">here</a>.</p>\n"}}]}]}