{"nbformat":4,"nbformat_minor":0,"metadata":{"kernel_info":{"name":"Weblab"},"language_info":{"name":"javascript"}},"cells":[{"cell_type":"markdown","metadata":{},"source":["# Getting started with Danfo.js\n\nIf you are processing a lot of data, you need some tools to simplify the process. One such tool is [Danfo.js](https://danfo.jsdata.org/). According to its website: \"Danfo.js is an open-source, JavaScript library providing high-performance, intuitive, and easy-to-use data structures for manipulating and processing structured data\".\nIf you are coming from a Python background, you are probably familar with [Pandas](https://pandas.pydata.org/). Danfo.js is its javascript equivalent.\n\nThis notebook shall give a short introduction on how to use Danfo.js. \nLet us start with importing the required dependencies."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h1>Getting started with Danfo.js</h1>\n<p>If you are processing a lot of data, you need some tools to simplify the process. One such tool is <a href=\"https://danfo.jsdata.org/\">Danfo.js</a>. According to its website: &quot;Danfo.js is an open-source, JavaScript library providing high-performance, intuitive, and easy-to-use data structures for manipulating and processing structured data&quot;.\nIf you are coming from a Python background, you are probably familar with <a href=\"https://pandas.pydata.org/\">Pandas</a>. Danfo.js is its javascript equivalent.</p>\n<p>This notebook shall give a short introduction on how to use Danfo.js.\nLet us start with importing the required dependencies.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["import {Series, DataFrame} from 'danfojs'\nimport * as tf from '@tensorflow/tfjs'\n\ntf.version.tfjs"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["## Creating Dataframes\n\nThe basic tool for working with tabular data in Danfo.js is a Dataframe.\nA Dataframe is a 2-dimensional datastructure that can store data of different types in its columns.\nEach column and each row have labels. For many applications the labels of the rows are integer indices.\n\nThere are many ways to define Dataframes in Danfo.js. One way is with an array of JSON-objects that specify the entries of each label. Read the Danfo.js [Getting Started guide](https://danfo.jsdata.org/getting-started) for other ways to create dataframes."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h2>Creating Dataframes</h2>\n<p>The basic tool for working with tabular data in Danfo.js is a Dataframe.\nA Dataframe is a 2-dimensional datastructure that can store data of different types in its columns.\nEach column and each row have labels. For many applications the labels of the rows are integer indices.</p>\n<p>There are many ways to define Dataframes in Danfo.js. One way is with an array of JSON-objects that specify the entries of each label. Read the Danfo.js <a href=\"https://danfo.jsdata.org/getting-started\">Getting Started guide</a> for other ways to create dataframes.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let json_data = [{ A: 0.4612, B: 4.28283, C: -1.509, D: -1.1352 },\n            { A: 0.5112, B: -0.22863, C: -3.39059, D: 1.1632 },\n            { A: 0.6911, B: -0.82863, C: -1.5059, D: 2.1352 },\n            { A: 0.4692, B: -1.28863, C: 4.5059, D: 4.1632 }]\n\nlet df = new DataFrame(json_data);"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["You can display the dataframe by using the `toString()` method."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>You can display the dataframe by using the <code>toString()</code> method.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df.toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The labels \"A, B, C, D\" of the columns are displayed at the top and the indices of the rows on the left side. The datatypes of each column can be displayed with the `ctypes` property."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The labels &quot;A, B, C, D&quot; of the columns are displayed at the top and the indices of the rows on the left side. The datatypes of each column can be displayed with the <code>ctypes</code> property.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df.ctypes.toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["## Creating Series\n\nEach column in a DataFrame is a Series.\nWhen defining a Series, the integer indices are created automatically.\nA Series can be created with an array."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h2>Creating Series</h2>\n<p>Each column in a DataFrame is a Series.\nWhen defining a Series, the integer indices are created automatically.\nA Series can be created with an array.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let s = new Series([ 1, 2, 3, 4])"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Display the Series with the `toString()` method:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Display the Series with the <code>toString()</code> method:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["s.toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["You can also create Series from Tensorflow tensors:"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>You can also create Series from Tensorflow tensors:</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let tensor = tf.tensor([2,4,8,16]);\nlet s_tensor = new Series(tensor);\n\ns_tensor.toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["## Viewing data\n\nIf you are working on large datasets, displaying only specific parts of the data becomes important. The label of a column can be used to obtain that column as a Series."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h2>Viewing data</h2>\n<p>If you are working on large datasets, displaying only specific parts of the data becomes important. The label of a column can be used to obtain that column as a Series.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df[\"A\"].toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The `head` and `tail` functions display the top or bottom rows of the dataframe."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The <code>head</code> and <code>tail</code> functions display the top or bottom rows of the dataframe.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df.head(2).toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The `index` and `column` properties can be used to show the labels of the rows and columns."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The <code>index</code> and <code>column</code> properties can be used to show the labels of the rows and columns.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df.columns.toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["The `describe` method can be used to display common statistics about the dataframe."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>The <code>describe</code> method can be used to display common statistics about the dataframe.</p>\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["df.describe().toString()"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]}]}